// Code generated by protoc-gen-go. DO NOT EDIT.
// source: play.proto

package play

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Step struct {
	X                    int32    `protobuf:"zigzag32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"zigzag32,2,opt,name=y,proto3" json:"y,omitempty"`
	Player               *Player  `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}
func (*Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_03fd247ccdc4d930, []int{0}
}
func (m *Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Step.Unmarshal(m, b)
}
func (m *Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Step.Marshal(b, m, deterministic)
}
func (dst *Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Step.Merge(dst, src)
}
func (m *Step) XXX_Size() int {
	return xxx_messageInfo_Step.Size(m)
}
func (m *Step) XXX_DiscardUnknown() {
	xxx_messageInfo_Step.DiscardUnknown(m)
}

var xxx_messageInfo_Step proto.InternalMessageInfo

func (m *Step) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Step) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Step) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

type Player struct {
	Color                uint32   `protobuf:"varint,1,opt,name=color,proto3" json:"color,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_03fd247ccdc4d930, []int{1}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (dst *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(dst, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *Player) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type State struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_03fd247ccdc4d930, []int{2}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (dst *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(dst, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *State) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Resumed struct {
	Move                 []string `protobuf:"bytes,1,rep,name=move,proto3" json:"move,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resumed) Reset()         { *m = Resumed{} }
func (m *Resumed) String() string { return proto.CompactTextString(m) }
func (*Resumed) ProtoMessage()    {}
func (*Resumed) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_03fd247ccdc4d930, []int{3}
}
func (m *Resumed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resumed.Unmarshal(m, b)
}
func (m *Resumed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resumed.Marshal(b, m, deterministic)
}
func (dst *Resumed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resumed.Merge(dst, src)
}
func (m *Resumed) XXX_Size() int {
	return xxx_messageInfo_Resumed.Size(m)
}
func (m *Resumed) XXX_DiscardUnknown() {
	xxx_messageInfo_Resumed.DiscardUnknown(m)
}

var xxx_messageInfo_Resumed proto.InternalMessageInfo

func (m *Resumed) GetMove() []string {
	if m != nil {
		return m.Move
	}
	return nil
}

func (m *Resumed) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*Step)(nil), "play.Step")
	proto.RegisterType((*Player)(nil), "play.Player")
	proto.RegisterType((*State)(nil), "play.State")
	proto.RegisterType((*Resumed)(nil), "play.Resumed")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TurnClient is the client API for Turn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TurnClient interface {
	SetMove(ctx context.Context, in *Step, opts ...grpc.CallOption) (*State, error)
	GetMove(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Step, error)
	UpdateNext(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	IsNextPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error)
	SetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error)
	GetAIPlayer(ctx context.Context, in *State, opts ...grpc.CallOption) (*Player, error)
	HasChosen(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	HasMoved(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error)
	SetResumed(ctx context.Context, in *Resumed, opts ...grpc.CallOption) (*State, error)
	GetResumed(ctx context.Context, in *State, opts ...grpc.CallOption) (*Resumed, error)
	NewRoom(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	GetID(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	SetExit(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	CheckExit(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
}

type turnClient struct {
	cc *grpc.ClientConn
}

func NewTurnClient(cc *grpc.ClientConn) TurnClient {
	return &turnClient{cc}
}

func (c *turnClient) SetMove(ctx context.Context, in *Step, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/SetMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) GetMove(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Step, error) {
	out := new(Step)
	err := c.cc.Invoke(ctx, "/play.Turn/GetMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) UpdateNext(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/UpdateNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) IsNextPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/IsNextPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) SetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/SetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) GetAIPlayer(ctx context.Context, in *State, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/play.Turn/GetAIPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) HasChosen(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/HasChosen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) HasMoved(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/HasMoved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) SetResumed(ctx context.Context, in *Resumed, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/SetResumed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) GetResumed(ctx context.Context, in *State, opts ...grpc.CallOption) (*Resumed, error) {
	out := new(Resumed)
	err := c.cc.Invoke(ctx, "/play.Turn/GetResumed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) NewRoom(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/NewRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) GetID(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/GetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) SetExit(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/SetExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turnClient) CheckExit(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/play.Turn/CheckExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurnServer is the server API for Turn service.
type TurnServer interface {
	SetMove(context.Context, *Step) (*State, error)
	GetMove(context.Context, *Player) (*Step, error)
	UpdateNext(context.Context, *State) (*State, error)
	IsNextPlayer(context.Context, *Player) (*State, error)
	SetPlayer(context.Context, *Player) (*State, error)
	GetAIPlayer(context.Context, *State) (*Player, error)
	HasChosen(context.Context, *State) (*State, error)
	HasMoved(context.Context, *Player) (*State, error)
	SetResumed(context.Context, *Resumed) (*State, error)
	GetResumed(context.Context, *State) (*Resumed, error)
	NewRoom(context.Context, *State) (*State, error)
	GetID(context.Context, *State) (*State, error)
	SetExit(context.Context, *State) (*State, error)
	CheckExit(context.Context, *State) (*State, error)
}

func RegisterTurnServer(s *grpc.Server, srv TurnServer) {
	s.RegisterService(&_Turn_serviceDesc, srv)
}

func _Turn_SetMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Step)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).SetMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/SetMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).SetMove(ctx, req.(*Step))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_GetMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).GetMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/GetMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).GetMove(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_UpdateNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).UpdateNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/UpdateNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).UpdateNext(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_IsNextPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).IsNextPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/IsNextPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).IsNextPlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_SetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).SetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/SetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).SetPlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_GetAIPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).GetAIPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/GetAIPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).GetAIPlayer(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_HasChosen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).HasChosen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/HasChosen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).HasChosen(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_HasMoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).HasMoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/HasMoved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).HasMoved(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_SetResumed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resumed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).SetResumed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/SetResumed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).SetResumed(ctx, req.(*Resumed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_GetResumed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).GetResumed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/GetResumed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).GetResumed(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_NewRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).NewRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/NewRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).NewRoom(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/GetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).GetID(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_SetExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).SetExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/SetExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).SetExit(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turn_CheckExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurnServer).CheckExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/play.Turn/CheckExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurnServer).CheckExit(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

var _Turn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "play.Turn",
	HandlerType: (*TurnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMove",
			Handler:    _Turn_SetMove_Handler,
		},
		{
			MethodName: "GetMove",
			Handler:    _Turn_GetMove_Handler,
		},
		{
			MethodName: "UpdateNext",
			Handler:    _Turn_UpdateNext_Handler,
		},
		{
			MethodName: "IsNextPlayer",
			Handler:    _Turn_IsNextPlayer_Handler,
		},
		{
			MethodName: "SetPlayer",
			Handler:    _Turn_SetPlayer_Handler,
		},
		{
			MethodName: "GetAIPlayer",
			Handler:    _Turn_GetAIPlayer_Handler,
		},
		{
			MethodName: "HasChosen",
			Handler:    _Turn_HasChosen_Handler,
		},
		{
			MethodName: "HasMoved",
			Handler:    _Turn_HasMoved_Handler,
		},
		{
			MethodName: "SetResumed",
			Handler:    _Turn_SetResumed_Handler,
		},
		{
			MethodName: "GetResumed",
			Handler:    _Turn_GetResumed_Handler,
		},
		{
			MethodName: "NewRoom",
			Handler:    _Turn_NewRoom_Handler,
		},
		{
			MethodName: "GetID",
			Handler:    _Turn_GetID_Handler,
		},
		{
			MethodName: "SetExit",
			Handler:    _Turn_SetExit_Handler,
		},
		{
			MethodName: "CheckExit",
			Handler:    _Turn_CheckExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "play.proto",
}

func init() { proto.RegisterFile("play.proto", fileDescriptor_play_03fd247ccdc4d930) }

var fileDescriptor_play_03fd247ccdc4d930 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xd1, 0x4e, 0xfa, 0x30,
	0x14, 0xc6, 0x19, 0x8c, 0xc1, 0x0e, 0xf0, 0x4f, 0xfe, 0x8d, 0x31, 0x0b, 0x57, 0x64, 0x42, 0x58,
	0x34, 0x62, 0x82, 0x4f, 0x60, 0xc0, 0x8c, 0x5d, 0x48, 0x4c, 0xa7, 0x0f, 0x30, 0xe1, 0x24, 0x18,
	0x81, 0x2e, 0xeb, 0x41, 0xc7, 0x0b, 0xfa, 0x5c, 0xa6, 0xdd, 0x88, 0x0c, 0x0d, 0x78, 0x77, 0xbe,
	0xf6, 0x77, 0xbe, 0x9e, 0xaf, 0x4d, 0x01, 0xe2, 0x65, 0xb4, 0x1d, 0xc4, 0x89, 0x20, 0xc1, 0x4c,
	0x55, 0xbb, 0x13, 0x30, 0x43, 0xc2, 0x98, 0x35, 0xc1, 0x48, 0x1d, 0xa3, 0x63, 0x78, 0xff, 0xb9,
	0x91, 0x2a, 0xb5, 0x75, 0xca, 0x99, 0xda, 0xb2, 0x2e, 0x58, 0x8a, 0xc5, 0xc4, 0xa9, 0x74, 0x0c,
	0xaf, 0x31, 0x6c, 0x0e, 0xb4, 0xcd, 0xa3, 0x5e, 0xe3, 0xf9, 0x9e, 0x3b, 0x00, 0x2b, 0x5b, 0x61,
	0x67, 0x50, 0x9d, 0x89, 0xa5, 0x48, 0xb4, 0x5f, 0x8b, 0x67, 0x82, 0xfd, 0x83, 0x72, 0x30, 0xd6,
	0xa6, 0x36, 0x2f, 0x07, 0x63, 0xf7, 0x06, 0xaa, 0x21, 0x45, 0x84, 0xec, 0x1c, 0x2c, 0x49, 0x11,
	0x6d, 0xa4, 0xe6, 0xeb, 0x3c, 0x57, 0x3f, 0x1a, 0xae, 0xa1, 0xc6, 0x51, 0x6e, 0x56, 0x38, 0x67,
	0x0c, 0xcc, 0x95, 0x78, 0x47, 0xc7, 0xe8, 0x54, 0x3c, 0x9b, 0xeb, 0xfa, 0x10, 0x1f, 0x7e, 0x9a,
	0x60, 0x3e, 0x6d, 0x92, 0x35, 0xeb, 0x42, 0x2d, 0x44, 0x7a, 0x50, 0x0c, 0x64, 0x93, 0xab, 0xc4,
	0xed, 0xc6, 0xae, 0x8e, 0x08, 0xdd, 0x12, 0xeb, 0x41, 0xcd, 0xcf, 0xa9, 0x42, 0xbe, 0xf6, 0x5e,
	0x8f, 0x5b, 0x62, 0x1e, 0xc0, 0x73, 0x3c, 0x8f, 0x08, 0xa7, 0x98, 0x12, 0xdb, 0xf7, 0x38, 0x34,
	0xbc, 0x82, 0x66, 0x20, 0x15, 0x95, 0xdf, 0x4a, 0xd1, 0xf5, 0x00, 0xf6, 0xc0, 0x0e, 0xf1, 0x4f,
	0xe4, 0x25, 0x34, 0x7c, 0xa4, 0xbb, 0x20, 0x67, 0x0b, 0x13, 0x14, 0x1a, 0xdd, 0x12, 0xeb, 0x83,
	0x3d, 0x89, 0xe4, 0x68, 0x21, 0x24, 0xae, 0x8f, 0xce, 0xda, 0x87, 0xfa, 0x24, 0x92, 0x2a, 0xfc,
	0xfc, 0xd4, 0xe9, 0x10, 0x22, 0xed, 0x9e, 0xa1, 0x95, 0x6d, 0xe6, 0xf2, 0x17, 0xd6, 0xff, 0x66,
	0x0b, 0xc7, 0x17, 0x1b, 0xb3, 0xdb, 0x9f, 0xe2, 0x07, 0x17, 0x62, 0x75, 0x74, 0xce, 0x0b, 0xa8,
	0xfa, 0x48, 0xc1, 0xf8, 0x28, 0xd4, 0xd3, 0xef, 0x7d, 0x9f, 0xbe, 0xd2, 0x89, 0xcc, 0xf6, 0x68,
	0x81, 0xb3, 0xb7, 0x53, 0xe0, 0x8b, 0xa5, 0xff, 0xcb, 0xed, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0x77, 0x4c, 0x5b, 0x3d, 0x03, 0x00, 0x00,
}
